        -:    0:Source:tcas.c
        -:    0:Graph:tcas.gcno
        -:    0:Data:tcas.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*  -*- Last-Edit:  Fri Jan 29 11:13:27 1993 by Tarak S. Goradia; -*- */
        -:    2:/* $Log: tcas.c,v $
        -:    3: * Revision 1.2  1993/03/12  19:29:50  foster
        -:    4: * Correct logic bug which didn't allow output of 2 - hf
        -:    5: * */
        -:    6:
        -:    7:#include <stdio.h>
        -:    8:
        -:    9:#define OLEV       600		/* in feets/minute */
        -:   10:#define MAXALTDIFF 600		/* max altitude difference in feet */
        -:   11:#define MINSEP     300          /* min separation in feet */
        -:   12:#define NOZCROSS   100		/* in feet */
        -:   13:				/* variables */
        -:   14:
        -:   15:typedef int bool;
        -:   16:
        -:   17:int Cur_Vertical_Sep;
        -:   18:bool High_Confidence;
        -:   19:bool Two_of_Three_Reports_Valid;
        -:   20:
        -:   21:int Own_Tracked_Alt;
        -:   22:int Own_Tracked_Alt_Rate;
        -:   23:int Other_Tracked_Alt;
        -:   24:
        -:   25:int Alt_Layer_Value;		/* 0, 1, 2, 3 */
        -:   26:int Positive_RA_Alt_Thresh[4];
        -:   27:
        -:   28:int Up_Separation;
        -:   29:int Down_Separation;
        -:   30:
        -:   31:				/* state variables */
        -:   32:int Other_RAC;			/* NO_INTENT, DO_NOT_CLIMB, DO_NOT_DESCEND */
        -:   33:#define NO_INTENT 0
        -:   34:#define DO_NOT_CLIMB 1
        -:   35:#define DO_NOT_DESCEND 2
        -:   36:
        -:   37:int Other_Capability;		/* TCAS_TA, OTHER */
        -:   38:#define TCAS_TA 1
        -:   39:#define OTHER 2
        -:   40:
        -:   41:int Climb_Inhibit;		/* true/false */
        -:   42:
        -:   43:#define UNRESOLVED 0
        -:   44:#define UPWARD_RA 1
        -:   45:#define DOWNWARD_RA 2
        -:   46:
function initialize called 1 returned 100% blocks executed 100%
        1:   47:void initialize()
        -:   48:{
        1:   49:    Positive_RA_Alt_Thresh[0] = 400;
        1:   50:    Positive_RA_Alt_Thresh[1] = 500;
        1:   51:    Positive_RA_Alt_Thresh[2] = 640;
        1:   52:    Positive_RA_Alt_Thresh[3] = 740;
        1:   53:}
        -:   54:
function ALIM called 2 returned 100% blocks executed 100%
        2:   55:int ALIM ()
        -:   56:{
        2:   57: return Positive_RA_Alt_Thresh[Alt_Layer_Value];
        -:   58:}
        -:   59:
function Inhibit_Biased_Climb called 2 returned 100% blocks executed 80%
        2:   60:int Inhibit_Biased_Climb ()
        -:   61:{
        2:   62:    return (Climb_Inhibit ? Up_Separation + NOZCROSS : Up_Separation);
branch  0 taken 2 (fallthrough)
branch  1 taken 0
        -:   63:}
        -:   64:
function Non_Crossing_Biased_Climb called 1 returned 100% blocks executed 52%
        1:   65:bool Non_Crossing_Biased_Climb()
        -:   66:{
        -:   67:    int upward_preferred;
        -:   68:    int upward_crossing_situation;
        -:   69:    bool result;
        -:   70:
        1:   71:    upward_preferred = Inhibit_Biased_Climb() > Down_Separation;
call    0 returned 1
        1:   72:    if (upward_preferred)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   73:    {
    #####:   74:	result = !(Own_Below_Threat()) || ((Own_Below_Threat()) && (!(Down_Separation >= ALIM())));
call    0 never executed
branch  1 never executed
branch  2 never executed
call    3 never executed
branch  4 never executed
branch  5 never executed
call    6 never executed
branch  7 never executed
branch  8 never executed
        -:   75:    }
        -:   76:    else
        -:   77:    {	
        1:   78:	result = Own_Above_Threat() && (Cur_Vertical_Sep >= MINSEP) && (Up_Separation >= ALIM());
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
branch  3 taken 1 (fallthrough)
branch  4 taken 0
call    5 returned 1
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -:   79:    }
        1:   80:    return result;
        -:   81:}
        -:   82:
function Non_Crossing_Biased_Descend called 1 returned 100% blocks executed 57%
        1:   83:bool Non_Crossing_Biased_Descend()
        -:   84:{
        -:   85:    int upward_preferred;
        -:   86:    int upward_crossing_situation;
        -:   87:    bool result;
        -:   88:
        1:   89:    upward_preferred = Inhibit_Biased_Climb() >= Down_Separation; /* operator mutation */
call    0 returned 1
        1:   90:    if (upward_preferred)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   91:    {
    #####:   92:	result = Own_Below_Threat() && (Cur_Vertical_Sep >= MINSEP) && (Down_Separation >= ALIM());
call    0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
call    5 never executed
branch  6 never executed
branch  7 never executed
        -:   93:    }
        -:   94:    else
        -:   95:    {
        1:   96:	result = !(Own_Above_Threat()) || ((Own_Above_Threat()) && (Up_Separation >= ALIM()));
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
call    6 returned 1
branch  7 taken 1 (fallthrough)
branch  8 taken 0
        -:   97:    }
        1:   98:    return result;
        -:   99:}
        -:  100:
function Own_Below_Threat called 1 returned 100% blocks executed 100%
        1:  101:bool Own_Below_Threat()
        -:  102:{
        1:  103:    return (Own_Tracked_Alt < Other_Tracked_Alt);
        -:  104:}
        -:  105:
function Own_Above_Threat called 4 returned 100% blocks executed 100%
        4:  106:bool Own_Above_Threat()
        -:  107:{
        4:  108:    return (Other_Tracked_Alt < Own_Tracked_Alt);
        -:  109:}
        -:  110:
function alt_sep_test called 1 returned 100% blocks executed 71%
        1:  111:int alt_sep_test()
        -:  112:{
        -:  113:    bool enabled, tcas_equipped, intent_not_known;
        -:  114:    bool need_upward_RA, need_downward_RA;
        -:  115:    int alt_sep;
        -:  116:
        1:  117:    enabled = High_Confidence && (Own_Tracked_Alt_Rate <= OLEV) && (Cur_Vertical_Sep > MAXALTDIFF);
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 1 (fallthrough)
branch  3 taken 0
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  118:    tcas_equipped = Other_Capability == TCAS_TA;
        1:  119:    intent_not_known = Two_of_Three_Reports_Valid && Other_RAC == NO_INTENT;
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        -:  120:    
        1:  121:    alt_sep = UNRESOLVED;
        -:  122:    
        1:  123:    if (enabled && ((tcas_equipped && intent_not_known) || !tcas_equipped))
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 1
branch  4 never executed
branch  5 never executed
branch  6 taken 1 (fallthrough)
branch  7 taken 0
        -:  124:    {
        1:  125:	need_upward_RA = Non_Crossing_Biased_Climb() && Own_Below_Threat();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 0 (fallthrough)
branch  5 taken 1
        1:  126:	need_downward_RA = Non_Crossing_Biased_Descend() && Own_Above_Threat();
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
call    3 returned 1
branch  4 taken 1 (fallthrough)
branch  5 taken 0
        1:  127:	if (need_upward_RA && need_downward_RA)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        -:  128:        /* unreachable: requires Own_Below_Threat and Own_Above_Threat
        -:  129:           to both be true - that requires Own_Tracked_Alt < Other_Tracked_Alt
        -:  130:           and Other_Tracked_Alt < Own_Tracked_Alt, which isn't possible */
    #####:  131:	    alt_sep = UNRESOLVED;
        1:  132:	else if (need_upward_RA)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
    #####:  133:	    alt_sep = UPWARD_RA;
        1:  134:	else if (need_downward_RA)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        1:  135:	    alt_sep = DOWNWARD_RA;
        -:  136:	else
    #####:  137:	    alt_sep = UNRESOLVED;
        -:  138:    }
        -:  139:    
        1:  140:    return alt_sep;
        -:  141:}
        -:  142:
function main called 1 returned 0% blocks executed 74%
        1:  143:main(argc, argv)
        -:  144:int argc;
        -:  145:char *argv[];
        -:  146:{
        1:  147:    if(argc < 13)
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  148:    {
    #####:  149:	fprintf(stdout, "Error: Command line arguments are\n");
call    0 never executed
    #####:  150:	fprintf(stdout, "Cur_Vertical_Sep, High_Confidence, Two_of_Three_Reports_Valid\n");
call    0 never executed
    #####:  151:	fprintf(stdout, "Own_Tracked_Alt, Own_Tracked_Alt_Rate, Other_Tracked_Alt\n");
call    0 never executed
    #####:  152:	fprintf(stdout, "Alt_Layer_Value, Up_Separation, Down_Separation\n");
call    0 never executed
    #####:  153:	fprintf(stdout, "Other_RAC, Other_Capability, Climb_Inhibit\n");
call    0 never executed
    #####:  154:	exit(1);
call    0 never executed
        -:  155:    }
        1:  156:    initialize();
call    0 returned 1
        1:  157:    Cur_Vertical_Sep = atoi(argv[1]);
call    0 returned 1
        1:  158:    High_Confidence = atoi(argv[2]);
call    0 returned 1
        1:  159:    Two_of_Three_Reports_Valid = atoi(argv[3]);
call    0 returned 1
        1:  160:    Own_Tracked_Alt = atoi(argv[4]);
call    0 returned 1
        1:  161:    Own_Tracked_Alt_Rate = atoi(argv[5]);
call    0 returned 1
        1:  162:    Other_Tracked_Alt = atoi(argv[6]);
call    0 returned 1
        1:  163:    Alt_Layer_Value = atoi(argv[7]);
call    0 returned 1
        1:  164:    Up_Separation = atoi(argv[8]);
call    0 returned 1
        1:  165:    Down_Separation = atoi(argv[9]);
call    0 returned 1
        1:  166:    Other_RAC = atoi(argv[10]);
call    0 returned 1
        1:  167:    Other_Capability = atoi(argv[11]);
call    0 returned 1
        1:  168:    Climb_Inhibit = atoi(argv[12]);
call    0 returned 1
        -:  169:
        1:  170:    fprintf(stdout, "%d\n", alt_sep_test());
call    0 returned 1
call    1 returned 1
        1:  171:    exit(0);
        -:  172:}
