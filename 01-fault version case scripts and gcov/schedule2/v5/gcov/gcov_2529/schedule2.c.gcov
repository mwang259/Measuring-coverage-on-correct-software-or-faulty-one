        -:    0:Source:schedule2.c
        -:    0:Graph:schedule2.gcno
        -:    0:Data:schedule2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* $Log: schedule.c,v $
        -:    3: * Revision 1.4  1993/05/04  12:23:58  foster
        -:    4: * Debug stuff removed
        -:    5: *
        -:    6: * Revision 1.3  1993/05/03  20:27:04  foster
        -:    7: * Full Functionality
        -:    8: *
        -:    9: * Revision 1.2  1993/05/03  15:41:01  foster
        -:   10: * Restructure functions
        -:   11: *
        -:   12: * Revision 1.1  1993/05/01  11:38:04  foster
        -:   13: * Initial revision
        -:   14: * */
        -:   15:
        -:   16:#include <stdio.h>
        -:   17:#include "schedule2.h"
        -:   18:
        -:   19:static struct process * current_job;
        -:   20:static int next_pid = 0;
        -:   21:
        -:   22:int
function enqueue called 4 returned 100% blocks executed 80%
        4:   23:enqueue(prio, new_process)
        -:   24:     int prio;
        -:   25:     struct process *new_process;
        -:   26:{
        -:   27:    int status;
        4:   28:    if(status = put_end(prio, new_process)) return(status); /* Error */
call    0 returned 4
branch  1 taken 0 (fallthrough)
branch  2 taken 4
        4:   29:    return(reschedule(prio));
call    0 returned 4
        -:   30:}
        -:   31:
        -:   32:struct queue
        -:   33:{
        -:   34:    int length;
        -:   35:    struct process *head;
        -:   36:};
        -:   37:
        -:   38:static struct queue prio_queue[MAXPRIO + 1]; /* blocked queue is [0] */
        -:   39:
        -:   40:
        -:   41:
function main called 1 returned 0% blocks executed 78%
        1:   42:main(argc, argv) /* n3, n2, n1 : # of processes at prio3 ... */
        -:   43:int argc;
        -:   44:char *argv[];
        -:   45:{
        -:   46:    int command, prio;
        -:   47:    float ratio;
        -:   48:    int nprocs, status, pid;
        -:   49:    struct process *process;
        1:   50:    if(argc != MAXPRIO + 1) exit_here(BADNOARGS);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 never executed
        4:   51:    for(prio = MAXPRIO; prio > 0; prio--)
branch  0 taken 3
branch  1 taken 1 (fallthrough)
        -:   52:    {
        3:   53:	if((nprocs = atoi(argv[MAXPRIO + 1 - prio])) < 0) exit_here(BADARG);
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
call    3 never executed
        6:   54:	for(; nprocs > 0; nprocs--)
branch  0 taken 3
branch  1 taken 3 (fallthrough)
        -:   55:	{
        3:   56:	    if(status = new_job(prio)) exit_here(status);
call    0 returned 3
branch  1 taken 0 (fallthrough)
branch  2 taken 3
call    3 never executed
        -:   57:	}
        -:   58:    }
        -:   59:    /* while there are commands, schedule it */
        6:   60:    while((status = get_command(&command, &prio, &ratio)) > 0)
call    0 returned 5
branch  1 taken 4
branch  2 taken 1 (fallthrough)
        -:   61:    {
        4:   62:	schedule(command, prio, ratio);
call    0 returned 4
        -:   63:    }
        1:   64:    if(status < 0) exit_here(status); /* Real bad error */
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 never executed
        1:   65:    exit_here(OK);
call    0 returned 0
        -:   66:}
        -:   67:
        -:   68:int 
function get_command called 5 returned 100% blocks executed 79%
        5:   69:get_command(command, prio, ratio)
        -:   70:    int *command, *prio;
        -:   71:    float *ratio;
        -:   72:{
        5:   73:    int status = OK;
        -:   74:    char buf[CMDSIZE];
        5:   75:    if(fgets(buf, CMDSIZE, stdin))
call    0 returned 5
branch  1 taken 4 (fallthrough)
branch  2 taken 1
        -:   76:    {
        4:   77:	*prio = *command = -1; *ratio =-1.0;
        4:   78:	sscanf(buf, "%d", command);
        4:   79:	switch(*command)
branch  0 taken 0
branch  1 taken 1
branch  2 taken 1
branch  3 taken 2
        -:   80:	{
    #####:   81:	  case NEW_JOB :
    #####:   82:	    sscanf(buf, "%*s%d", prio);
    #####:   83:	    break;
        1:   84:	  case UNBLOCK :
        1:   85:	    sscanf(buf, "%*s%f", ratio);
        1:   86:	    break;
        1:   87:	  case UPGRADE_PRIO :
        1:   88:	    sscanf(buf, "%*s%d%f", prio, ratio);
        1:   89:	    break;
        -:   90:	}
        -:   91:	 /* Find end of  line of input if no EOF */
        4:   92:	while(buf[strlen(buf)-1] != '\n' && fgets(buf, CMDSIZE, stdin));
branch  0 taken 0 (fallthrough)
branch  1 taken 4
call    2 never executed
branch  3 never executed
branch  4 never executed
        4:   93:	return(TRUE);
        -:   94:    }
        1:   95:    else return(FALSE);
        -:   96:}
        -:   97:
function exit_here called 1 returned 0% blocks executed 100%
        1:   98:exit_here(status)
        -:   99:     int status;
        -:  100:{
        1:  101:    exit(abs(status));
        -:  102:}
        -:  103:
        -:  104:
        -:  105:int 
function new_job called 3 returned 100% blocks executed 64%
        3:  106:new_job(prio) /* allocate new pid and process block. Stick at end */
        -:  107:     int prio;
        -:  108:{
        3:  109:    int pid, status = OK;
        -:  110:    struct process *new_process;
        3:  111:    if(prio < 1) return(BADPRIO); /* Mustn't allow 0 */
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3:  112:    pid = next_pid++;
        3:  113:    new_process = (struct process *) malloc(sizeof(struct process));
        3:  114:    if(!new_process) status = MALLOC_ERR;
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  115:    else
        -:  116:    {
        3:  117:	new_process->pid = pid;
        3:  118:	new_process->priority = prio;
        3:  119:	new_process->next = (struct process *) 0;
        3:  120:	status = enqueue(prio, new_process);
call    0 returned 3
        3:  121:	if(status)
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        -:  122:	{
    #####:  123:	    free(new_process); /* Return process block */
        -:  124:	}
        -:  125:    }
        3:  126:    if(status) next_pid--; /* Unsuccess. Restore pid */
branch  0 taken 0 (fallthrough)
branch  1 taken 3
        3:  127:    return(status);
        -:  128:}
        -:  129:
function upgrade_prio called 1 returned 100% blocks executed 44%
        1:  130:int upgrade_prio(prio, ratio) /* increment priority at ratio in queue */
        -:  131:     int prio;
        -:  132:     float ratio;
        -:  133:{
        -:  134:    int status;
        -:  135:    struct process * job;
        1:  136:    if(prio < 1 || prio > MAXLOPRIO) return(BADPRIO);
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
    #####:  137:    if((status = get_process(prio, ratio, &job)) <= 0) return(status);
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  138:    /* We found a job in that queue. Upgrade it */
    #####:  139:    job->priority = prio + 1;
    #####:  140:    return(enqueue(prio + 1, job));
call    0 never executed
        -:  141:}
        -:  142:
        -:  143:int
function block called 1 returned 100% blocks executed 80%
        1:  144:block() /* Put current job in blocked queue */
        -:  145:{
        -:  146:    struct process * job;
        1:  147:    job = get_current();
call    0 returned 1
        1:  148:    if(job)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  149:    {
        1:  150:	current_job = (struct process *)0; /* remove it */
        1:  151:	return(enqueue(BLOCKPRIO, job)); /* put into blocked queue */
call    0 returned 1
        -:  152:    }
    #####:  153:    return(OK);
        -:  154:}
        -:  155:
        -:  156:int
function unblock called 1 returned 100% blocks executed 83%
        1:  157:unblock(ratio) /* Restore job @ ratio in blocked queue to its queue */
        -:  158:     float ratio;
        -:  159:{
        -:  160:    int status;
        -:  161:    struct process * job;
        1:  162:    if((status = get_process(BLOCKPRIO, ratio, &job)) <= 0) return(status);
call    0 returned 1
branch  1 taken 1 (fallthrough)
branch  2 taken 0
        -:  163:    /* We found a blocked process. Put it where it belongs. */
    #####:  164:    return(enqueue(job->priority, job));
call    0 never executed
        -:  165:}
        -:  166:
        -:  167:int
function quantum_expire called 0 returned 0% blocks executed 0%
    #####:  168:quantum_expire() /* put current job at end of its queue */
        -:  169:{
        -:  170:    struct process * job;
    #####:  171:    job = get_current();
call    0 never executed
    #####:  172:    if(job)
branch  0 never executed
branch  1 never executed
        -:  173:    {
    #####:  174:	current_job = (struct process *)0; /* remove it */
    #####:  175:	return(enqueue(job->priority, job));
call    0 never executed
        -:  176:    }
    #####:  177:    return(OK);
        -:  178:}
        -:  179:
        -:  180:int
function finish called 1 returned 100% blocks executed 86%
        1:  181:finish() /* Get current job, print it, and zap it. */
        -:  182:{
        -:  183:    struct process * job;
        1:  184:    job = get_current();
call    0 returned 1
        1:  185:    if(job)
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  186:    {
        1:  187:	current_job = (struct process *)0;
        1:  188:	reschedule(0);
call    0 returned 1
        1:  189:	fprintf(stdout, " %d", job->pid);
call    0 returned 1
        1:  190:	free(job);
        1:  191:	return(FALSE);
        -:  192:    }
    #####:  193:    else return(TRUE);
        -:  194:}
        -:  195:
        -:  196:int
function flush called 0 returned 0% blocks executed 0%
    #####:  197:flush() /* Get all jobs in priority queues & zap them */
        -:  198:{
    #####:  199:    while(!finish());
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  200:    fprintf(stdout, "\n");
call    0 never executed
    #####:  201:    return(OK);
        -:  202:}
        -:  203:
        -:  204:struct process * 
function get_current called 7 returned 100% blocks executed 100%
        7:  205:get_current() /* If no current process, get it. Return it */
        -:  206:{
        -:  207:    int prio;
        7:  208:    if(!current_job)
branch  0 taken 3 (fallthrough)
branch  1 taken 4
        -:  209:    {
        6:  210:	for(prio = MAXPRIO; prio > 0; prio--)
branch  0 taken 6
branch  1 taken 0 (fallthrough)
        -:  211:	{ /* find head of highest queue with a process */
        6:  212:	    if(get_process(prio, 0.0, &current_job) > 0) break;
call    0 returned 6
branch  1 taken 3 (fallthrough)
branch  2 taken 3
        -:  213:	}
        -:  214:    }
        7:  215:    return(current_job);
        -:  216:}
        -:  217:
        -:  218:int
function reschedule called 5 returned 100% blocks executed 71%
        5:  219:reschedule(prio) /* Put highest priority job into current_job */
        -:  220:     int prio;
        -:  221:{
        5:  222:    if(current_job && prio > current_job->priority)
branch  0 taken 2 (fallthrough)
branch  1 taken 3
branch  2 taken 0 (fallthrough)
branch  3 taken 2
        -:  223:    {
    #####:  224:	put_end(current_job->priority, current_job);
call    0 never executed
    #####:  225:	current_job = (struct process *)0;
        -:  226:    }
        5:  227:    get_current(); /* Reschedule */
call    0 returned 5
        5:  228:    return(OK);
        -:  229:}
        -:  230:
        -:  231:int 
function schedule called 4 returned 100% blocks executed 63%
        4:  232:schedule(command, prio, ratio)
        -:  233:    int command, prio;
        -:  234:    float ratio;
        -:  235:{
        4:  236:    int status = OK;
        4:  237:    switch(command)
branch  0 taken 0
branch  1 taken 0
branch  2 taken 1
branch  3 taken 1
branch  4 taken 1
branch  5 taken 1
branch  6 taken 0
branch  7 taken 0
        -:  238:    {
    #####:  239:      case NEW_JOB :
    #####:  240:        status = new_job(prio);
call    0 never executed
    #####:  241:	break;
    #####:  242:      case QUANTUM_EXPIRE :
    #####:  243:        status = quantum_expire();
call    0 never executed
    #####:  244:	break;
        1:  245:      case UPGRADE_PRIO :
        1:  246:        status = upgrade_prio(prio, ratio);
call    0 returned 1
        1:  247:	break;
        1:  248:      case BLOCK :
        1:  249:        status = block();
call    0 returned 1
        1:  250:	break;
        1:  251:      case UNBLOCK :
        1:  252:        status = unblock(ratio);
call    0 returned 1
        1:  253:	break;
        1:  254:      case FINISH :
        1:  255:        finish();
call    0 returned 1
        1:  256:	fprintf(stdout, "\n");
call    0 returned 1
        1:  257:	break;
    #####:  258:      case FLUSH :
    #####:  259:        status = flush();
call    0 never executed
    #####:  260:	break;
    #####:  261:      default:
    #####:  262:	status = NO_COMMAND;
        -:  263:    }
        4:  264:    return(status);
        -:  265:}
        -:  266:
        -:  267:
        -:  268:
        -:  269:
        -:  270:int 
function put_end called 4 returned 100% blocks executed 75%
        4:  271:put_end(prio, process) /* Put process at end of queue */
        -:  272:     int prio;
        -:  273:     struct process *process;
        -:  274:{
        -:  275:    struct process **next;
        4:  276:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
branch  0 taken 4 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 4
        -:  277:     /* find end of queue */
        4:  278:    for(next = &prio_queue[prio].head; *next; next = &(*next)->next);
branch  0 taken 0
branch  1 taken 4 (fallthrough)
        4:  279:    *next = process;
        4:  280:    prio_queue[prio].length++;
        4:  281:    return(OK);
        -:  282:}
        -:  283:
        -:  284:int 
function get_process called 7 returned 100% blocks executed 88%
        7:  285:get_process(prio, ratio, job)
        -:  286:     int prio;
        -:  287:     float ratio;
        -:  288:     struct process ** job;
        -:  289:{
        -:  290:    int length, index;
        -:  291:    struct process **next;
        7:  292:    if(prio > MAXPRIO || prio < 0) return(BADPRIO); /* Somebody goofed */
branch  0 taken 7 (fallthrough)
branch  1 taken 0
branch  2 taken 0 (fallthrough)
branch  3 taken 7
        7:  293:    if(ratio < 0.0 || ratio > 1.0) return(BADRATIO); /* Somebody else goofed */
branch  0 taken 6 (fallthrough)
branch  1 taken 1
branch  2 taken 0 (fallthrough)
branch  3 taken 6
        6:  294:    length = prio_queue[prio].length;
        6:  295:    index = ratio * length;
        6:  296:    index = index >= length ? length -1 : index; /* If ratio == 1.0 */
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        6:  297:    for(next = &prio_queue[prio].head; index && *next; index--)
branch  0 taken 3 (fallthrough)
branch  1 taken 3
branch  2 taken 0
branch  3 taken 3 (fallthrough)
    #####:  298:        next = &(*next)->next; /* Count up to it */
        6:  299:    *job = *next;
        6:  300:    if(*job)
branch  0 taken 3 (fallthrough)
branch  1 taken 3
        -:  301:    {
        3:  302:	*next = (*next)->next; /* Mend the chain */
        3:  303:	(*job)->next = (struct process *) 0; /* break this link */
        3:  304:	prio_queue[prio].length--;
        3:  305:	return(TRUE);
        -:  306:    }
        3:  307:    else return(FALSE);
        -:  308:}
