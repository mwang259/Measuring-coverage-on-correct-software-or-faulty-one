        -:    0:Source:tot_info.c
        -:    0:Graph:tot_info.gcno
        -:    0:Data:tot_info.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2:	tot_info -- combine information statistics for multiple tables
        -:    3:
        -:    4:	last edit:	89/02/06	D A Gwyn
        -:    5:
        -:    6:	SCCS ID:	@(#)tot_info.c	1.1 (edited for publication)
        -:    7:*/
        -:    8:
        -:    9:#include	<ctype.h>
        -:   10:#include	<stdio.h>
        -:   11:
        -:   12:#include	"std.h"
        -:   13:
        -:   14:#include	"chisq.h"
        -:   15:#include	"gamma.h"		/* for QChiSq() */
        -:   16:
        -:   17:
        -:   18:#define	MAXLINE	256
        -:   19:
        -:   20:
        -:   21:#ifndef MAXTBL
        -:   22:#define	MAXTBL	1000
        -:   23:#endif
        -:   24:
        -:   25:static char	line[MAXLINE];		/* row/column header input line */
        -:   26:static long	f[MAXTBL];		/* frequency tallies */
        -:   27:static int	r;			/* # of rows */
        -:   28:static int	c;			/* # of columns */
        -:   29:
        -:   30:#define	x(i,j)	f[(i)*c+(j)]		/* convenient way to access freqs */
        -:   31:
        -:   32:#define	COMMENT	'#'			/* comment character */
        -:   33:
        -:   34:
        -:   35:#ifndef NULL
        -:   36:#define NULL 0
        -:   37:#endif
        -:   38:
        -:   39:/*ARGSUSED*/
        -:   40:int
function main called 1 returned 100% blocks executed 67%
        1:   41:main( argc, argv )
        -:   42:	int		argc;
        -:   43:	char		*argv[];
        -:   44:	{
        -:   45:	char	*p;		/* input line scan location */
        -:   46:	int	i;		/* row index */
        -:   47:	int	j;		/* column index */
        -:   48:	double		info;		/* computed information measure */
        -:   49:	int		infodf;		/* degrees of freedom for information */
        1:   50:	double		totinfo = 0.0;	/* accumulated information */
        -:   51:	int		totdf;	/* accumulated degrees of freedom */
        -:   52: 
        1:   53:        totdf = 0;
        -:   54:
        5:   55:	while ( fgets( line, MAXLINE, stdin ) != NULL )	/* start new table */
call    0 returned 4
branch  1 taken 3
branch  2 taken 1 (fallthrough)
        -:   56:		{
        3:   57:		for ( p = line; *p != '\0' && isspace( (int)*p ); ++p )
branch  0 taken 4 (fallthrough)
branch  1 taken 1
branch  2 taken 2
branch  3 taken 2 (fallthrough)
        -:   58:			;
        -:   59:
        3:   60:		if ( *p == '\0' )
branch  0 taken 1 (fallthrough)
branch  1 taken 2
        1:   61:			continue;	/* skip blank line */
        -:   62:
        2:   63:		if ( *p == COMMENT )
branch  0 taken 1 (fallthrough)
branch  1 taken 1
        -:   64:			{		/* copy comment through */
        1:   65:			(void)fputs( line, stdout );
call    0 returned 1
        1:   66:			continue;
        -:   67:			}
        -:   68:
        1:   69:		if ( sscanf( p, "%d %d\n", &r, &c ) != 2 )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   70:			{
    #####:   71:			(void)fputs( "* invalid row/column line *\n", stdout );
call    0 never executed
    #####:   72:			return EXIT_FAILURE;
        -:   73:			}
        -:   74:
        1:   75:		if ( r * c >= MAXTBL )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:   76:			{
    #####:   77:			(void)fputs( "* table too large *\n", stdout );
call    0 never executed
    #####:   78:			return EXIT_FAILURE;
        -:   79:			}
        -:   80:
        -:   81:		/* input tallies */
        -:   82:
        2:   83:		for ( i = 0; i < r; ++i )
branch  0 taken 1
branch  1 taken 1 (fallthrough)
        8:   84:			for ( j = 0; j < c; ++j )
branch  0 taken 7
branch  1 taken 1 (fallthrough)
        7:   85:				if ( scanf( " %ld", &x(i,j) ) != 1 )
call    0 returned 7
branch  1 taken 0 (fallthrough)
branch  2 taken 7
        -:   86:					{
    #####:   87:					(void)fputs( "* EOF in table *\n",
call    0 never executed
        -:   88:						     stdout
        -:   89:						   );
    #####:   90:					return EXIT_FAILURE;
        -:   91:					}
        -:   92:
        -:   93:		/* compute statistic */
        -:   94:
        1:   95:		info = InfoTbl( r, c, f, &infodf );
call    0 returned 1
        -:   96:
        -:   97:		/* print results */
        -:   98:
        1:   99:		if ( info >= 0.0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
        -:  100:			{
    #####:  101:			(void)printf( "2info = %5.2f\tdf = %2d\tq = %7.4f\n",
call    0 never executed
call    1 never executed
        -:  102:				      info, infodf,
        -:  103:				      QChiSq( info, infodf )
        -:  104:				    );
    #####:  105:			totinfo += info;
    #####:  106:			totdf += infodf;
        -:  107:			}
        -:  108:		else
        2:  109:			(void)fputs( info < -3.5 ? "out of memory\n"
branch  0 taken 0 (fallthrough)
branch  1 taken 1
call    2 returned 1
        1:  110:				   : info < -2.5 ? "table too small\n"
branch  0 taken 1 (fallthrough)
branch  1 taken 0
branch  2 never executed
branch  3 never executed
        -:  111:				   : info < -1.5 ? "negative freq\n"
        -:  112:				   : "table all zeros\n",
        -:  113:				     stdout
        -:  114:				   );
        -:  115:		}
        -:  116:
        1:  117:	if ( totdf <= 0 )
branch  0 taken 1 (fallthrough)
branch  1 taken 0
        -:  118:		{
        1:  119:		(void)fputs( "\n*** no information accumulated ***\n", stdout );
call    0 returned 1
        1:  120:		return EXIT_FAILURE;
        -:  121:		}
        -:  122:
    #####:  123:	(void)printf( "\ntotal 2info = %5.2f\tdf = %2d\tq = %7.4f\n",
call    0 never executed
call    1 never executed
        -:  124:		      totinfo, totdf,
        -:  125:		      QChiSq( totinfo, totdf )
        -:  126:		    );
    #####:  127:	return EXIT_SUCCESS;
        -:  128:	}
        -:  129:
        -:  130:
        -:  131:/*  -*- Last-Edit:  Tue Dec 15 14:48:14 1992 by Tarak S. Goradia; -*- */
        -:  132:
        -:  133:/*
        -:  134:	Gamma -- gamma and related functions
        -:  135:
        -:  136:	last edit:	88/09/09	D A Gwyn
        -:  137:
        -:  138:	SCCS ID:	@(#)gamma.c	1.1 (edited for publication)
        -:  139:
        -:  140:Acknowledgement:
        -:  141:	Code based on that found in "Numerical Methods in C".
        -:  142:*/
        -:  143:
        -:  144:#include	<math.h>
        -:  145:#include        <stdio.h>
        -:  146:
        -:  147:#include	"std.h"
        -:  148:#define sin
        -:  149:#define log
        -:  150:#define exp
        -:  151:double
function LGamma called 0 returned 0% blocks executed 0%
    #####:  152:LGamma( x )
        -:  153:	double			x;
        -:  154:	{
        -:  155:	static const double	cof[6] =
        -:  156:		{
        -:  157:		76.18009173,	-86.50532033,	24.01409822,
        -:  158:		-1.231739516,	0.120858003e-2,	-0.536382e-5
        -:  159:		};
        -:  160:	double			tmp, ser;
        -:  161:	int		j;
        -:  162:
        -:  163:
    #####:  164:	if ( --x < 0.0 )	/* use reflection formula for accuracy */
branch  0 never executed
branch  1 never executed
        -:  165:		{
    #####:  166:		double	pix = PI * x;
        -:  167:
    #####:  168:		return log( pix / sin( pix ) ) - LGamma( 1.0 - x );
call    0 never executed
        -:  169:		}
        -:  170:
    #####:  171:	tmp = x + 5.5;
    #####:  172:	tmp -= (x + 0.5) * log( tmp );
        -:  173:
    #####:  174:	ser = 1.0;
        -:  175:
    #####:  176:	for ( j = 0; j < 6; ++j )
branch  0 never executed
branch  1 never executed
    #####:  177:		ser += cof[j] / ++x;
        -:  178:
    #####:  179:	return -tmp + log( 2.50662827465 * ser );
        -:  180:	}
        -:  181:
        -:  182:#define	ITMAX	100
        -:  183:#define	EPS	3.0e-7
        -:  184:
        -:  185:static double
function gser called 0 returned 0% blocks executed 0%
    #####:  186:gser( a, x )
        -:  187:	double		a, x;
        -:  188:	{
        -:  189:	double		ap, del, sum;
        -:  190:	int	n;
        -:  191:
        -:  192:
    #####:  193:	if ( x <= 0.0 )
branch  0 never executed
branch  1 never executed
    #####:  194:		return 0.0;
        -:  195:
    #####:  196:	del = sum = 1.0 / (ap = a);
        -:  197:
    #####:  198:	for ( n = 1; n <= ITMAX; ++n )
branch  0 never executed
branch  1 never executed
        -:  199:		{
    #####:  200:		sum += del *= x / ++ap;
        -:  201:
    #####:  202:		if ( Abs( del ) < Abs( sum ) * EPS )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  203:			return sum * exp( -x + a * log( x ) - LGamma( a ) );
call    0 never executed
        -:  204:		}
        -:  205:
        -:  206:	/*NOTREACHED*/
    #####:  207:	}
        -:  208:
        -:  209:static double
function gcf called 0 returned 0% blocks executed 0%
    #####:  210:gcf( a, x )
        -:  211:	double		a, x;
        -:  212:	{
        -:  213:	int	n;
    #####:  214:	double		gold = 0.0, fac = 1.0, b1 = 1.0,
    #####:  215:			b0 = 0.0, a0 = 1.0, a1 = x;
        -:  216:
    #####:  217:	for ( n = 1; n <= ITMAX; ++n )
branch  0 never executed
branch  1 never executed
        -:  218:		{
        -:  219:		double	anf;
    #####:  220:		double	an = (double)n;
    #####:  221:		double	ana = an - a;
        -:  222:
    #####:  223:		a0 = (a1 + a0 * ana) * fac;
    #####:  224:		b0 = (b1 + b0 * ana) * fac;
    #####:  225:		anf = an * fac;
    #####:  226:		b1 = x * b0 + anf * b1;
    #####:  227:		a1 = x * a0 + anf * a1;
        -:  228:
    #####:  229:		if ( a1 != 0.0 )
branch  0 never executed
branch  1 never executed
        -:  230:			{		/* renormalize */
    #####:  231:			double	g = b1 * (fac = 1.0 / a1);
        -:  232:
    #####:  233:			gold = g - gold;
        -:  234:
    #####:  235:			if ( Abs( gold ) < EPS * Abs( g ) )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  236:				return exp( -x + a * log( x ) - LGamma( a ) ) * g;
call    0 never executed
        -:  237:
    #####:  238:			gold = g;
        -:  239:			}
        -:  240:		}
        -:  241:
        -:  242:	/*NOTREACHED*/
    #####:  243:	}
        -:  244:
        -:  245:double
function QGamma called 0 returned 0% blocks executed 0%
    #####:  246:QGamma( a, x )
        -:  247:	double	a, x;
        -:  248:	{
        -:  249:
    #####:  250:	return x < a + 1.0 ? 1.0 - gser( a, x ) : gcf( a, x );
branch  0 never executed
branch  1 never executed
call    2 never executed
call    3 never executed
        -:  251:	}
        -:  252:
        -:  253:double
function QChiSq called 0 returned 0% blocks executed 0%
    #####:  254:QChiSq( chisq, df )
        -:  255:	double	chisq;
        -:  256:	int	df;
        -:  257:	{
    #####:  258:	return QGamma( (double)df / 2.0, chisq / 2.0 );
call    0 never executed
        -:  259:	}
        -:  260:
        -:  261:
        -:  262:/*
        -:  263:	InfoTbl -- Kullback's information measure for a 2-way contingency table
        -:  264:
        -:  265:	last edit:	88/09/19	D A Gwyn
        -:  266:
        -:  267:	SCCS ID:	@(#)info.c	1.1 (edited for publication)
        -:  268:
        -:  269:	Special return values:
        -:  270:		-1.0	entire table consisted of 0 entries
        -:  271:		-2.0	invalid table entry (frequency less than 0)
        -:  272:		-3.0	invalid table dimensions (r or c less than 2)
        -:  273:		-4.0	unable to allocate enough working storage
        -:  274:*/
        -:  275:
        -:  276:#include	<math.h>		/* for log() */
        -:  277:#if __STDC__
        -:  278:#include	<stdlib.h>		/* malloc, free */
        -:  279:
        -:  280:#include	"std.h"
        -:  281:#else
        -:  282:#include	"std.h"
        -:  283:
        -:  284:extern pointer	malloc();
        -:  285:extern void	free();
        -:  286:#endif
        -:  287:
        -:  288:#ifndef NULL
        -:  289:#define NULL 0
        -:  290:#endif
        -:  291:
        -:  292:#define	x(i,j)	f[(i)*c+(j)]		/* convenient way to access freqs */
        -:  293:
        -:  294:double
function InfoTbl called 1 returned 100% blocks executed 9%
        1:  295:InfoTbl( r, c, f, pdf )
        -:  296:	int		r;		/* # rows in table */
        -:  297:	int		c;		/* # columns in table */
        -:  298:	const long	*f;		/* -> r*c frequency tallies */
        -:  299:	int		*pdf;		/* -> return # d.f. for chi-square */
        -:  300:	{
        -:  301:	int	i;		/* row index */
        -:  302:	int	j;		/* column index */
        -:  303:	double		N;		/* (double)n */
        -:  304:	double		info;		/* accumulates information measure */
        -:  305:	double		*xi;		/* row sums */
        -:  306:	double		*xj;		/* col sums */
        1:  307:	int		rdf = r - 1;	/* row degrees of freedom */
        1:  308:	int		cdf = c - 1;	/* column degrees of freedom */
        -:  309:
        1:  310:	if ( rdf <= 0 || cdf <= 0 )
branch  0 taken 0 (fallthrough)
branch  1 taken 1
branch  2 never executed
branch  3 never executed
        -:  311:		{
        1:  312:		info = -3.0;
        1:  313:		goto ret3;
        -:  314:		}
        -:  315:
    #####:  316:	*pdf = rdf * cdf;		/* total degrees of freedom */
        -:  317:
    #####:  318:	if ( (xi = (double *)malloc( r * sizeof(double) )) == NULL )
branch  0 never executed
branch  1 never executed
        -:  319:		{
    #####:  320:		info = -4.0;
    #####:  321:		goto ret3;
        -:  322:		}
        -:  323:
    #####:  324:	if ( (xj = (double *)malloc( c * sizeof(double) )) == NULL )
branch  0 never executed
branch  1 never executed
        -:  325:		{
    #####:  326:		info = -4.0;
    #####:  327:		goto ret2;
        -:  328:		}
        -:  329:
        -:  330:	/* compute row sums and total */
        -:  331:
    #####:  332:	N = 0.0;
        -:  333:
    #####:  334:	for ( i = 0; i < r; ++i )
branch  0 never executed
branch  1 never executed
        -:  335:		{
    #####:  336:		double	sum = 0.0;	/* accumulator */
        -:  337:
    #####:  338:		for ( j = 0; j < c; ++j )
branch  0 never executed
branch  1 never executed
        -:  339:			{
    #####:  340:			long	k = x(i,j);
        -:  341:
    #####:  342:			if ( k < 0L )
branch  0 never executed
branch  1 never executed
        -:  343:				{
    #####:  344:				info = -2.0;
    #####:  345:				goto ret1;
        -:  346:				}
        -:  347:
    #####:  348:			sum += (double)k;
        -:  349:			}
        -:  350:
    #####:  351:		N += xi[i] = sum;
        -:  352:		}
        -:  353:
    #####:  354:	if ( N <= 0.0 )
branch  0 never executed
branch  1 never executed
        -:  355:		{
    #####:  356:		info = -1.0;
    #####:  357:		goto ret1;
        -:  358:		}
        -:  359:
        -:  360:	/* compute column sums */
        -:  361:
    #####:  362:	for ( j = 0; j < c; ++j )
branch  0 never executed
branch  1 never executed
        -:  363:		{
    #####:  364:		double	sum = 0.0;	/* accumulator */
        -:  365:
    #####:  366:		for ( i = 0; i < r; ++i )
branch  0 never executed
branch  1 never executed
    #####:  367:			sum += (double)x(i,j);
        -:  368:
    #####:  369:		xj[j] = sum;
        -:  370:		}
        -:  371:
        -:  372:	/* compute information measure (four parts) */
        -:  373:
    #####:  374:	info = N * log( N );					/* part 1 */
        -:  375:
    #####:  376:	for ( i = 0; i < r; ++i )
branch  0 never executed
branch  1 never executed
        -:  377:		{
    #####:  378:		double	pi = xi[i];	/* row sum */
        -:  379:
    #####:  380:		if ( pi > 0.0 )
branch  0 never executed
branch  1 never executed
    #####:  381:			info -= pi * log( pi );			/* part 2 */
        -:  382:
    #####:  383:		for ( j = 0; j < c; ++j )
branch  0 never executed
branch  1 never executed
        -:  384:			{
    #####:  385:			double	pij = (double)x(i,j);
        -:  386:
    #####:  387:			if ( pij > 0.0 )
branch  0 never executed
branch  1 never executed
    #####:  388:				info += pij * log( pij );	/* part 3 */
        -:  389:			}
        -:  390:		}
        -:  391:
    #####:  392:	for ( j = 0; j < c; ++j )
branch  0 never executed
branch  1 never executed
        -:  393:		{
    #####:  394:		double	pj = xj[j];	/* column sum */
        -:  395:
    #####:  396:		if ( pj > 0.0 )
branch  0 never executed
branch  1 never executed
    #####:  397:			info -= pj * log( pj );			/* part 4 */
        -:  398:		}
        -:  399:
    #####:  400:	info *= 2.0;			/* for comparability with chi-square */
        -:  401:
    #####:  402:    ret1:
    #####:  403:	free( (pointer)xj );
    #####:  404:    ret2:
    #####:  405:	free( (pointer)xi );
        1:  406:    ret3:
        1:  407:	return info;
        -:  408:	}
